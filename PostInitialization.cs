// NativeGenericDelegates
// https://github.com/monkey0506/native-generic-delegates
// Copyright(C) 2022-2023 Michael Rittenhouse monkey0506@gmail.com

// This C# project and all associated project files are hereby committed to the
// public domain pursuant to the WTFPL http://www.wtfpl.net/about/ without
// warranty of any kind, express or implied, including but not limited to
// fitness for a particular purpose. Attribution is appreciated, but not
// required.

using System.Text;

namespace NativeGenericDelegatesGenerator
{
    internal static class PostInitialization
    {
        private static void BuildNativeAction(StringBuilder sb, string callConv)
        {
            string unmanagedCallConv = Constants.GetUnmanagedCallConv(callConv);
            string funcPtr = $"delegate* unmanaged[{unmanagedCallConv}]<void>";
            _ = sb.AppendLine($@"    file unsafe class NativeAction_{callConv} : INativeAction
    {{
        private readonly NonGenericAction nonGenericAction;
        private readonly {funcPtr} functionPtr;

        [UnmanagedFunctionPointer(CallingConvention.{callConv})]
        public delegate void NonGenericAction();

        public NativeAction_{callConv}(Action action)
        {{
            nonGenericAction = (NonGenericAction)Delegate.CreateDelegate(typeof(Action), action.Target, action.Method);
            functionPtr = ({funcPtr})Marshal.GetFunctionPointerForDelegate(nonGenericAction);
        }}

        public NativeAction_{callConv}(nint functionPtr)
        {{
            nonGenericAction = Invoke;
            this.functionPtr = ({funcPtr})functionPtr;
        }}

        public nint GetFunctionPointer()
        {{
            return (nint)functionPtr;
        }}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [UnmanagedCallConv(CallConvs = new[] {{ typeof(CallConv{unmanagedCallConv}) }})]
        public void Invoke()
        {{
            (({funcPtr})functionPtr)();
        }}

        public Action ToAction()
        {{
            return (Action)Delegate.CreateDelegate(typeof(Action), nonGenericAction.Target, nonGenericAction.Method);
        }}
    }}
");
        }

        private static void BuildNativeActions(StringBuilder sb)
        {
            BuildNativeAction(sb, Constants.CallConvCdecl);
            BuildNativeAction(sb, Constants.CallConvStdCall);
            BuildNativeAction(sb, Constants.CallConvThisCall);
        }

        public static string GetSource()
        {
            var source = new StringBuilder($@"// <auto-generated/>
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

#nullable enable

namespace {Constants.RootNamespace}
{{
    public interface INativeAction
    {{
        public static INativeAction FromAction(Action action, CallingConvention callingConvention = CallingConvention.Winapi)
        {{
            if (callingConvention == CallingConvention.Winapi)
            {{
                callingConvention = RuntimeInformation.IsOSPlatform(OSPlatform.Windows) ?
                    CallingConvention.StdCall :
                    CallingConvention.Cdecl;
            }}
            return callingConvention switch
            {{
                CallingConvention.Cdecl => new NativeAction_Cdecl(action),
                CallingConvention.StdCall => new NativeAction_StdCall(action),
                CallingConvention.ThisCall => new NativeAction_ThisCall(action),
                _ => throw new NotSupportedException()
            }};
        }}

        public static INativeAction FromFunctionPointer
        (
            nint functionPtr,
            CallingConvention callingConvention = CallingConvention.Winapi
        )
        {{
            if (callingConvention == CallingConvention.Winapi)
            {{
                callingConvention = RuntimeInformation.IsOSPlatform(OSPlatform.Windows) ?
                    CallingConvention.StdCall :
                    CallingConvention.Cdecl;
            }}
            return callingConvention switch
            {{
                CallingConvention.Cdecl => new NativeAction_Cdecl(functionPtr),
                CallingConvention.StdCall => new NativeAction_StdCall(functionPtr),
                CallingConvention.ThisCall => new NativeAction_ThisCall(functionPtr),
                _ => throw new NotSupportedException()
            }};
        }}

        public nint GetFunctionPointer();
        public void Invoke();
        public Action ToAction();
    }}

");
            BuildNativeActions(source);
            _ = source.Append($"{PartialImplementations.BuildPartialInterfaceDeclaration(isAction: false, 0)}");
            for (int i = 1; i < 17; ++i)
            {
                _ = source.AppendLine().AppendLine($"{PartialImplementations
                    .BuildPartialInterfaceDeclaration(isAction: true, argumentCount: i)}");
                _ = source.Append($"{PartialImplementations
                    .BuildPartialInterfaceDeclaration(isAction: false, argumentCount: i)}");
            }
            _ = source.AppendLine($@"}}

#nullable restore");
            return source.ToString();
        }
    }
}
